import { type NextPage } from "next";
import Head from "next/head";
import "twin.macro";
import { api } from "~/utils/api";
import { Layout, useSnackbar } from "~/components";
import { useForm, type SubmitHandler, useFieldArray } from "react-hook-form";
import { useRouter } from "next/router";
import { zodResolver } from "@hookform/resolvers/zod";
import { type Config } from "@prisma/client";
import { ConfigSchema } from "~/utils/schema";
import { prisma } from "~/server/db";
import { configRouter } from "~/server/api/routers/config";
import { useEffect } from "react";
import { defer } from "lodash";
import { Button, IconButton, Input, Textarea } from "~/components/myd";

interface ConfigForm extends Config {
  socials: { name: string; url: string }[];
}
interface ConfigParams extends Config {
  socials: { name: string; url: string }[];
}

const ConfigManager: NextPage<{ config: ConfigParams }> = ({ config }) => {
  const { open } = useSnackbar();
  const {
    register,
    handleSubmit,
    control,
    setValue,
    formState: { errors },
  } = useForm<ConfigForm>({
    resolver: zodResolver(ConfigSchema),
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: "socials",
  });

  const ConfigApi = api.config.upSert.useMutation({
    onSuccess: () => {
      open && open("保存成功");
      route.push("/");
    },
    onError: () => {
      open && open("保存失败");
    },
  });

  const route = useRouter();

  const onSubmit: SubmitHandler<ConfigForm> = async (data) => {
    await ConfigApi.mutate({
      blog_title: data.blog_title,
      blog_introduce: data.blog_introduce,
      slogan: data.slogan || "",
      socials: data.socials || [],
    });
  };

  useEffect(() => {
    if (config) {
      setValue("socials", config.socials);
      defer(() => {
        setValue("blog_title", config.blog_title);
        setValue("blog_introduce", config.blog_introduce);
        setValue("slogan", config.slogan);
      });
    }
  }, [config, setValue]);

  return (
    <>
      <Head>
        <title>配置管理</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div tw="mt-52 container mx-auto px-4 md:w-96">
          <div tw="mb-4">
            <h1 tw="headline-large text-center text-on-surface">
              配置你的博客
            </h1>
          </div>
          <form onSubmit={handleSubmit(onSubmit)} tw="space-y-5">
            <Input
              trailingIcon="title"
              label="标题"
              errors={errors}
              {...register("blog_title")}
            ></Input>
            <Input
              trailingIcon="description"
              {...register("slogan")}
              label="标语"
              errors={errors}
            ></Input>
            <Textarea
              {...register("blog_introduce")}
              label="描述"
              errors={errors}
            ></Textarea>
            {fields.map((item, index) => (
              <div key={item.id} tw="flex space-x-1 w-full items-center">
                <Input
                  {...register(`socials.${index}.name`)}
                  label="社交名称"
                  errors={errors}
                />
                <Input
                  {...register(`socials.${index}.url`)}
                  label="社交链接"
                  errors={errors}
                />
                <IconButton
                  icon="delete"
                  tw="flex-none"
                  variant="filled"
                  unSelected
                  onClick={() => remove(index)}
                ></IconButton>
              </div>
            ))}
            <Button
              onClick={() => append({ name: "", url: "" })}
              variant="tonal"
            >
              新增友联
            </Button>
            <div tw="flex flex-col md:flex-row justify-center space-y-2 md:(space-x-2 space-y-0)">
              <Button type="submit" variant="filled" tw="w-full">
                保存
              </Button>
            </div>
          </form>
        </div>
      </Layout>
    </>
  );
};

export default ConfigManager;

export async function getServerSideProps() {
  const configCaller = configRouter.createCaller({ prisma, session: null });
  const configData = await configCaller.get();
  return {
    props: {
      config: configData,
    },
  };
}

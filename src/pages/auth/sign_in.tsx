import { type InferGetServerSidePropsType, type NextPage } from "next";
import Head from "next/head";
import "twin.macro";
import { Button, Layout } from "~/components";
import { getProviders, signIn } from "next-auth/react";
import type { GetServerSidePropsContext } from "next";
import { getServerSession } from "next-auth";
import { authOptions } from "~/server/auth";

const SignIn: NextPage<{
  providers: InferGetServerSidePropsType<typeof getServerSideProps>;
}> = ({ providers }) => {
  return (
    <>
      <Head>
        <title>登录</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout hiddenTopFooter={true}>
        <div tw="mt-52 container mx-auto px-4 md:w-96">
          <div tw=" mb-4 ">
            <h1 tw="headline-large text-center text-on-surface ">
              登录您的博客
            </h1>
          </div>
          <div tw="flex flex-col md:flex-row justify-center space-y-2 md:(space-x-2 space-y-0) text-center">
            {Object.values(providers).map((provider: any) => (
              <div key={provider.id}>
                <Button onClick={() => signIn(provider?.id)} tw="w-full">
                  通过 {provider.name} 登录
                </Button>
              </div>
            ))}
          </div>
        </div>
      </Layout>
    </>
  );
};

export default SignIn;

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const session = await getServerSession(context.req, context.res, authOptions);

  // If the user is already logged in, redirect.
  // Note: Make sure not to redirect to the same page
  // To avoid an infinite loop!
  if (session) {
    return { redirect: { destination: "/" } };
  }

  const providers = await getProviders();

  return {
    props: { providers: providers ?? [] },
  };
}
